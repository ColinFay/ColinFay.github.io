call_api(con)
'MATCH (u:User) <-[:MENTIONS]- (:Tweet) -[:CONTAINS] -> (h:Hashtag)
RETURN h AS hashtag, u AS user
LIMIT 2' %>%
call_api(con)
'MATCH (u:User) <-[:MENTIONS]- (:Tweet) -[:CONTAINS] -> (h:Hashtag)
RETURN COUNT(h) AS hashtag, COUNT(u) AS user' %>%
call_api(con)
'MATCH (u:User) <-[:MENTIONS]- (:Tweet) -[:CONTAINS] -> (h:Hashtag)
RETURN COUNT(h) AS hashtag, u AS user' %>%
call_api(con)
'MATCH (u:User) <-[:MENTIONS]- (:Tweet) -[:CONTAINS] -> (h:Hashtag)
RETURN COUNT(h) AS hashtag_count, h AS hastags, u AS user' %>%
call_api(con)
'MATCH (u:User) <-[:MENTIONS]- (:Tweet) -[:CONTAINS] -> (h:Hashtag)
RETURN COUNT(h) AS hashtag_count, h AS hastags, COUNT(u) AS user_count, u as users' %>%
call_api(con)
'MATCH (t:Tweet) <- [:SENT] - (u:User)
RETURN u.name AS name, COUNT(u) AS count
ORDER BY COUNT(u) DESC
LIMIT 10' %>%
call_api(con) %>%
bind_cols() %>%
set_names(c("user", "n")) %>%
ggplot() +
aes(reorder(user, n), n) +
geom_col(fill = viridis::plasma(1)) +
coord_flip() +
labs(x = "user",y = "tweets") +
theme_minimal()
table(ny$user_id)
count(ny, screen_name)
count(ny, screen_name) %>% arrange(desc(n))
'MATCH (t:Tweet) -[r:CONTAINS]->(h:Hashtag)
WHERE NOT h.name = "rstatsnyc"
RETURN h.name as Hash, COUNT(h) AS count
ORDER BY COUNT(h) DESC
LIMIT 10' %>%
call_api(con) %>%
bind_cols() %>%
set_names(c("hashtags", "n"))
library(glue)
get_tweet_count <- function(who){
glue('MATCH (t:Tweet) <- [:SENT] - (u:User {name: "{who}"})
RETURN COUNT(t) AS {who}') %>%
call_api(con)
}
get_tweet_count("dataandme")
get_tweet_count <- function(who){
glue('MATCH (t:Tweet) <- [:SENT] - (u:User {name: "{who}"})
RETURN COUNT(t) AS {who}') %>%
call_api(con)
}
get_tweet_count("dataandme")
get_tweet_count <- function(who){
browser()
glue('MATCH (t:Tweet) <- [:SENT] - (u:User {name: "{who}"})
RETURN COUNT(t) AS {who}') %>%
call_api(con)
}
get_tweet_count("dataandme")
glue('MATCH (t:Tweet) <- [:SENT] - (u:User {name: "{who}"})
RETURN COUNT(t) AS {who}')
get_tweet_count <- function(who){
browser()
glue('MATCH (t:Tweet) <- [:SENT] - (u:User \{name: "{who}"\})
RETURN COUNT(t) AS {who}') %>%
call_api(con)
}
get_tweet_count("dataandme")
glue('MATCH (t:Tweet) <- [:SENT] - (u:User {name: "{who}"})
RETURN COUNT(t) AS {who}')
get_tweet_count <- function(who){
browser()
glue('MATCH (t:Tweet) <- [:SENT] - (u:User {name: "%who%"})
RETURN COUNT(t) AS %who%', .open = "%", .close = "%") %>%
call_api(con)
}
get_tweet_count("dataandme")
get_tweet_count <- function(who){
glue('MATCH (t:Tweet) <- [:SENT] - (u:User {name: "%who%"})
RETURN COUNT(t) AS %who%', .open = "%", .close = "%") %>%
call_api(con)
}
get_tweet_count("dataandme")
get_tweet_count("_colinfay")
get_tweet_count("_ColinFay")
get_tweet_count("RStudio")
get_tweet_count("rstudio")
get_tweet_count("hadleywickham")
library(visNetwork)
con$get_labels()
RETURN t, c, h' %>%
call_api(con, type = "graph")
'MATCH (t:Tweet) -[c:CONTAINS]-> (h:Hashtag) WHERE h.name = "rstats"
RETURN t, c, h' %>%
call_api(con, type = "graph")
RETURN t, c, h' %>%
call_api(con, type = "graph") %>%
unnest_graph()
'MATCH (t:Tweet) -[c:CONTAINS]-> (h:Hashtag) WHERE h.name = "rstats"
RETURN t, c, h' %>%
call_api(con, type = "graph") %>%
unnest_graph()
'MATCH (t:Tweet) -[c:CONTAINS]-> (h:Hashtag) WHERE h.name = "rstats"
RETURN t, c, h' %>%
call_api(con, type = "graph") %>%
unnest_graph() %>%
convert_to("visNetwork")
res <- 'MATCH (t:Tweet) -[c:CONTAINS]-> (h:Hashtag) WHERE h.name = "rstats"
RETURN t, c, h' %>%
call_api(con, type = "graph") %>%
unnest_graph()
visNetwork(nodes = res$nodes, edges = res$relationships)
res$nodes
res$nodes <- res$nodes %>% mutate(group = label)
res$relationships <- res$relationships %>% rename(from = startNode, to = endNode)
visNetwork(nodes = res$nodes, edges = res$relationships)
res <- 'MATCH (u:User) -[:SENT] -> (t:Tweet) -[c:CONTAINS]-> (h:Hashtag)
RETURN u, h' %>%
call_api(con, type = "graph") %>%
unnest_graph()
res$nodes <- res$nodes %>% mutate(group = label)
res$relationships <- res$relationships %>% rename(from = startNode, to = endNode)
res <- 'MATCH (u:User) -[:SENT] -> (t:Tweet) -[c:CONTAINS]-> (h:Hashtag)
RETURN u, h' %>%
call_api(con, type = "graph")
res <- 'MATCH (u:User) -[:SENT] -> (t:Tweet) -[c:CONTAINS]-> (h:Hashtag)
RETURN u, c, h' %>%
call_api(con, type = "graph") %>%
unnest_graph()
res$nodes <- res$nodes %>% mutate(group = label)
res$relationships <- res$relationships %>% rename(from = startNode, to = endNode)
visNetwork(nodes = res$nodes, edges = res$relationships)
res <- 'MATCH (u:User) -[:SENT] -> (t:Tweet) -[c:CONTAINS]-> (h:Hashtag name : {"GPU"})
RETURN u, c, h' %>%
call_api(con, type = "graph") %>%
unnest_graph()
res <- 'MATCH (u:User) -[:SENT] -> (t:Tweet) -[c:CONTAINS]-> (h:Hashtag {name : "GPU"})
RETURN u, c, h' %>%
call_api(con, type = "graph") %>%
unnest_graph()
res <- 'MATCH (u:User) -[:SENT] -> (t:Tweet) -[c:CONTAINS]-> (h:Hashtag {name : "GPU"})
RETURN u, c, h' %>%
call_api(con, type = "graph")
res <- 'MATCH (u:User) -[:SENT] -> (t:Tweet) -[c:CONTAINS]-> (h:Hashtag {name : "CPU"})
RETURN u, c, h' %>%
call_api(con, type = "graph")
res <- 'MATCH (u:User {name: "dataandme"}) -[:SENT] -> (t:Tweet) -[c:CONTAINS]-> (h:Hashtag)
RETURN u, c, h' %>%
call_api(con, type = "graph") %>%
unnest_graph()
res$nodes <- res$nodes %>% mutate(group = label)
res$relationships <- res$relationships %>% rename(from = startNode, to = endNode)
visNetwork(nodes = res$nodes, edges = res$relationships)
library(rtweet)
a <- get_friends("romain_francois")
a <- search_tweets("romain_francois")
rt <- search_tweets(
"#rstats", n = 18000, include_rts = FALSE
)
## whatever name you assigned to your created app
appname <- "rtweet_token"
appname <- "rtweet_token"
## api key (example below is not a real key)
key <- "6PYJLAP0zLYblsqxBI3BaLnR9"
## api secret (example below is not a real key)
secret <- "c20tkolg9M8shH4r0jEu0Qa3mkFilB146Eua8lZVYAlnUmVX4S"
## create token named "twitter_token"
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
a <- get_friends("romain_francois")
a <- get_friends("romain_francois", token = twitter_token)
who <- map(a$user_id, as_screenname, token = twitter_token)
who <- map(a$user_id, as_screenname)
who <- map(a$user_id, lookup_users, token = twitter_token)
names <- map(who, "name")
"LegoRLady" %in% names
"_ColinFay" %in% names
"ThinkR_FR" %in% names
"Thinkr_FR" %in% names
"VincentGuyader" %in% names
"DianeBeldame" %in% names
"DianeBELDAME" %in% names
lookup_friendships("romain_francois", "_ColinFay")
"_ColinFay" %in% names
"Thinkr_FR" %in% names
"VincentGuyader" %in% names
"DianeBELDAME" %in% names
"StatnMap" %in% names
"dataandme" %in% names
name <- map(who, "name")
name <- as_vector(name)
"_ColinFay" %in% name
"Thinkr_FR" %in% name
"VincentGuyader" %in% name
"DianeBELDAME" %in% name
"StatnMap" %in% name
"dataandme" %in% name
name
"Colin Fay" %in% name
sort(name)
"Diane BELDAME" %in% name
"thinkR" %in% name
"Sébastien Rochette" %in% name
"Vincent Guyader" %in% name
name <- map_chr(who, "name")
"Colin Fay" %in% name
"thinkR" %in% name
"Vincent Guyader" %in% name
"Diane BELDAME" %in% name
"Sébastien Rochette" %in% name
"dataandme" %in% name
file.show('about.md')
cat('about.md')
read.delim('about.md')
read.delim('about.md', nrows = 2)
read_file('about.md', nrows = 2)
read_file('about.md')
readLines('about.md')
readChar('about.md')
readChar('about.md', nchars = 200)
range(ny$created_at)
char <- c("AIASDFDIOHS*SDFDS", "ADUIHFSDUHF", "SDIFSDFIHSDOIU", "SDIOHFOSIDH#SDGFOIDS", "SDFIOJSD*IJF")
grepl("^A[.*^\\*]")
grepl("^A[.*^\\*]", char)
grepl("^A.+^\\*", char)
grepl("^A.+^\\*.+", char)
grepl("^A", char)
grepl("^A[^,;]+", char)
grepl("^A[^*;]+", char)
grepl("^A[^\\*;]+", char)
c("AIASDFDIOHS*SDFDS", "ADUIHFSDUHF",
"SDIFSDFIHSDOIU", "SDIOHFOSIDH#SDGFOIDS", "SDFIOJSD*IJF")
grepl("*", char)
grepl("\\*", char)
stringr::str_detect(char, pattern = "Â")
stringr::str_detect(char, pattern = "^A")
stringr::str_detect(char, pattern = "^A[^,;]+")
stringr::str_detect(char, pattern = "^A[^*;]+")
stringr::str_detect(char, pattern = "^A[^\*.]+")
stringr::str_detect(char, pattern = "^A[^\\*.]+")
stringr::str_detect(char, pattern = "^A.+")
stringr::str_detect(char, pattern = "^A[^#]")
grep("^A\\w+$",char,value = T)
library(tidyverse)
neighbour <- function(base,...){
dots <- quos(...)
regroup <- dots %>%
map(rlang::quo_text) %>%
unlist()
pos1 <- which(names(base) %in% regroup)[1]
gauche <- names(base)[1:(pos1-1)]
droite <- setdiff(names(base)[-c(1:pos1)],regroup)
base %>% select_at(c(gauche,regroup,droite))
}
base <- tribble(~a1,~a2,~b,~c,~a3,~d,
1,2,3,4,5,6)
base %>%
neighbour(a2,a3)# place a3 jusque a droite de a2
base
base %>%
neighbour(a2,a3)# place a3 jusque a droite de a2
base %>%
neighbour(a2,d) # place d juste a droite de a2
neighbour <- function(base,...){
browser()
dots <- quos(...)
regroup <- dots %>%
map(rlang::quo_text) %>%
unlist()
pos1 <- which(names(base) %in% regroup)[1]
gauche <- names(base)[1:(pos1-1)]
droite <- setdiff(names(base)[-c(1:pos1)],regroup)
base %>% select_at(c(gauche,regroup,droite))
}
base <- tribble(~a1,~a2,~b,~c,~a3,~d,
1,2,3,4,5,6)
base %>%
neighbour(a2,a3)# place a3 jusque a droite de a2
dots <- quos(...)
regroup <- dots %>%
map(rlang::quo_text) %>%
unlist()
neighbour <- function(base,...){
browser()
dots <- quos(...)
regroup <- dots %>%
map(rlang::quo_text) %>%
unlist()
pos1 <- which(names(base) %in% regroup)[1]
gauche <- names(base)[1:(pos1-1)]
droite <- setdiff(names(base)[-c(1:pos1)],regroup)
base %>% select_at(c(gauche,regroup,droite))
}
base %>%
neighbour(a2,a3)
ensym(...)
sym(...)
quo_text(...)
quotext(...)
regroup <- dots %>%
map(rlang::quo_text) %>%
unlist()
dots <- quos(...)
regroup <- dots %>%
map(rlang::quo_text) %>%
unlist()
pos1 <- which(names(base) %in% regroup)[1]
gauche <- names(base)[1:(pos1-1)]
droite <- setdiff(names(base)[-c(1:pos1)],regroup)
base %>% select_at(c(gauche,regroup,droite))
gauche
droite
regroup
pos1
select(base, 1:a2)
select(base, 1:a2)
base %>% select(1:a2)
base %>% select(1:a2, a3, everything())
neighbour2 <- function(base, where, col){
browser()
base %>% select(1:where, col, everything())
}
base %>%
neighbour2(a2,a3)
base %>% select(1:where, col, everything())
where <- enquo(where)
col <- enquo(col)
base %>% select(1: !!where, !!col, everything())
neighbour2 <- function(base, where, col){
where <- enquo(where)
col <- enquo(col)
base %>% select(1: !!where, !!col, everything())
}
base <- tribble(~a1,~a2,~b,~c,~a3,~d,
1,2,3,4,5,6)
base %>%
neighbour2(a2,a3)
base %>%
neighbour(a2,a3)# place a3 jusque a droite de a2
neighbour2 <- function(base, where, col){
where <- enquo(where)
col <- enquo(col)
base %>% select(1: !!where, !!col, everything())
}
base %>%
neighbour2(a2,a3)
base %>%
neighbour(a2,a3)
neighbour <- function(base,...){
dots <- quos(...)
regroup <- dots %>%
map(rlang::quo_text) %>%
unlist()
pos1 <- which(names(base) %in% regroup)[1]
select(base,)
gauche <- names(base)[1:(pos1-1)]
droite <- setdiff(names(base)[-c(1:pos1)],regroup)
base %>% select_at(c(gauche,regroup,droite))
}
neighbour <- function(base,...){
dots <- quos(...)
regroup <- dots %>%
map(rlang::quo_text) %>%
unlist()
pos1 <- which(names(base) %in% regroup)[1]
select(base,)
gauche <- names(base)[1:(pos1-1)]
droite <- setdiff(names(base)[-c(1:pos1)],regroup)
base %>% select_at(c(gauche,regroup,droite))
}
neighbour2 <- function(base, where, col){
where <- enquo(where)
col <- enquo(col)
base %>% select(1: !!where, !!col, everything())
}
base %>%
neighbour2(a2,a3)
base %>%
neighbour(a2,a3)# place a3 jusque a droite de a2
base %>%
neighbour(a2,d)
base %>%
neighbour2(a2,d) # place d juste a droite de a2
neighbour2 <- function(base, where, col){
where <- enquo(where)
col <- enquo(col)
base %>% select(1:!!where, !!col, everything())
}
base <- tribble(~a1,~a2,~b,~c,~a3,~d,
1,2,3,4,5,6)
base %>%
neighbour2(a2,a3)
neighbour2 <- function(base, where, ...){
where <- enquo(where)
col <- quos(...)
base %>% select(1:!!where, !!!col, everything())
}
base <- tribble(~a1,~a2,~b,~c,~a3,~d,
1,2,3,4,5,6)
base %>%
neighbour2(a2,a3) # je veux mettre a3 apres a2
base %>%
neighbour2(a2,a3, d) # je veux mettre a3 apres a2
'MATCH (u:Hahstag) <- [m:CONTAINS] - (t:Tweet) - [w:WAS_SENT]-> (d:Day)
RETURN u, m, t, w, d' %>%
call_api(con, type = "graph")
library(neo4r)
'MATCH (u:Hahstag) <- [m:CONTAINS] - (t:Tweet) - [w:WAS_SENT]-> (d:Day)
RETURN u, m, t, w, d' %>%
call_api(con, type = "graph")
library(neo4r)
con <- neo4j_api$new(url = "http://localhost:7474/",
user = "neo4j", password = "pouetpouet")
con$ping()
'MATCH (u:Hahstag) <- [m:CONTAINS] - (t:Tweet) - [w:WAS_SENT]-> (d:Day)
RETURN u, m, t, w, d' %>%
call_api(con, type = "graph")
'MATCH (u:Hashtag) <- [m:CONTAINS] - (t:Tweet) - [w:WAS_SENT]-> (d:Day)
RETURN u, m, t, w, d' %>%
call_api(con, type = "graph")
'MATCH (u:Hashtag) <- [m:CONTAINS] - (t:Tweet) - [w:WAS_SENT]-> (d:Day)
RETURN u, m, t, w, d' %>%
call_api(con, type = "graph")  %>%
convert_to("igraph")
'MATCH (u:Hashtag) <- [m:CONTAINS] - (t:Tweet) - [w:WAS_SENT]-> (d:Day)
RETURN u, m, t, w, d' %>%
call_api(con, type = "graph")  %>%
convert_to("igraph") %>%
ggraph() +
geom_edge_link()+
geom_node_label(aes(label = name,
color = group))
library(ggraph)
'MATCH (u:Hashtag) <- [m:CONTAINS] - (t:Tweet) - [w:WAS_SENT]-> (d:Day)
RETURN u, m, t, w, d' %>%
call_api(con, type = "graph")  %>%
convert_to("igraph") %>%
ggraph() +
geom_edge_link()+
geom_node_label(aes(label = name,
color = group))
'MATCH (u:Hashtag) <- [] - () - []-> (d:Day)
RETURN u, d' %>%
call_api(con, type = "graph")
'MATCH (u:User)-[m:MENTIONS]->(r:User {name:"RLadiesNYC"})
RETURN u, m, r' %>%
call_api(con, type = "graph")
'MATCH (u:User)-[:SENT] -> (t:Tweet) -[m:MENTIONS]-> (r:User {name:"RLadiesNYC"})
RETURN u, m, r' %>%
call_api(con, type = "graph")
'MATCH (u:User)-[:SENT] -> (t:Tweet) -[m:MENTIONS]-> (r:User {name:"RLadiesNYC"})
RETURN u, m, r' %>%
call_api(con, type = "graph")  %>%
convert_to("igraph")
'MATCH (u:User)-[:SENT] -> (t:Tweet) -[m:MENTIONS]-> (r:User {name:"RLadiesNYC"})
RETURN u, m, r' %>%
call_api(con, type = "graph")  %>%
convert_to("igraph") %>%
ggraph() +
geom_edge_link()+
geom_node_label(aes(label = name,
color = group))
'MATCH (u:User) - [s:SENT] -> (t:Tweet) -[m:MENTIONS]-> (r:User {name:"RLadiesNYC"})
RETURN u, s, m, r' %>%
call_api(con, type = "graph")  %>%
convert_to("igraph") %>%
ggraph() +
geom_edge_link()+
geom_node_label(aes(label = name,
color = group))
ny <- readRDS("/Users/colin/Seafile/documents_colin/R/minimal-mistakes/ny.RDS")
mutate(ny, forcats::fct_anon(as_factor(status_id)))
mutate(ny, status_id = forcats::fct_anon(as_factor(status_id)))
ny <- ny %>% mutate(status_id = forcats::fct_anon(as_factor(status_id)))
ny <- readRDS("/Users/colin/Seafile/documents_colin/R/minimal-mistakes/ny.RDS")
nrow(ny)
MATCH (u:User) <- [m:MENTIONS] - (t:Tweet) - [:CONTAINS]-> (:Hashtag {name : "rdogs"})
RETURN u, m, t
'MATCH (u:User) <- [m:MENTIONS] - (t:Tweet) - [:CONTAINS]-> (:Hashtag {name : "rdogs"})
RETURN u, m, t'
'MATCH (u:User) <- [m:MENTIONS] - (t:Tweet) - [:CONTAINS]-> (:Hashtag {name : "rdogs"})
RETURN u, m, t' %>%
call_api(con, type = "graph")
length(unique(ny$status_id))
ny <- ny %>% mutate(status_id = fct_anon(as_factor(status_id)))
length(unique(ny$status_id))
ny <- ny %>% mutate(status_id = fct_anon(as_factor(status_id)),
status_id = as.character(status_id))
length(unique(ny$status_id))
ny %>%
select(status_id, day, text, source,
lang, favorite_count, retweet_count,
is_quote, is_retweet)
ny <- readRDS("/Users/colin/Seafile/documents_colin/R/minimal-mistakes/ny.RDS")
ny <- ny %>% mutate(day = lubridate::day(created_at))
ny <- ny %>% mutate(status_id = fct_anon(as_factor(status_id)),
status_id = as.character(status_id))
# Be sure we still have 3000 observations
length(unique(ny$status_id))
ny %>%
select(status_id, day, text, source,
lang, favorite_count, retweet_count,
is_quote, is_retweet)
length(unique(c(ny$status_id, ny$reply_to_status_id)))
length(unique(ny$day))
length(unique(c(ny$status_id, ny$reply_to_status_id)))
c(ny$status_id, ny$reply_to_status_id)
c(ny$status_id, ny$reply_to_status_id) %>% unique()
